---
AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys a K8s cluster into a base networking environment

Parameters:

  VPCID:
    Description: The VPC to use
    Type: AWS::EC2::VPC::Id

  PublicSubnet0:
    Description: The EC2 Subnet to use
    Type: AWS::EC2::Subnet::Id

  PublicSubnet1:
    Description: The EC2 Subnet to use
    Type: AWS::EC2::Subnet::Id

  PublicSubnet2:
    Description: The EC2 Subnet to use
    Type: AWS::EC2::Subnet::Id

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

  MasterImageId:
    Description: AMI id for the master node instances.
    Type: AWS::EC2::Image::Id

  WorkerImageId:
    Description: AMI id for the worker node instances.
    Type: AWS::EC2::Image::Id

  InstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: t3.large

  HostedZoneId:
    Description: A description
    Type: AWS::Route53::HostedZone::Id

  MasterNodeNetworkLoadBalancerAliasName:
    Description: A description
    Type: String

Resources:

  MasterNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all master nodes in the cluster
      VpcId:
        !Ref VPCID
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-k8s-master-sg"

  K8sAPIServerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MasterNodeSecurityGroup
    Properties:
      Description: "kubernetes API server"
      GroupId: !Ref MasterNodeSecurityGroup
      SourceSecurityGroupId: !Ref MasterNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 6443
      ToPort: 6443

  WorkerK8sAPIServerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MasterNodeSecurityGroup
    Properties:
      Description: "worker access to kubernetes API server"
      GroupId: !Ref MasterNodeSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 6443
      ToPort: 6443

  EtcdServerClientAPIIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MasterNodeSecurityGroup
    Properties:
      Description: "etcd server client API"
      GroupId: !Ref MasterNodeSecurityGroup
      SourceSecurityGroupId: !Ref MasterNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 2379
      ToPort: 2380

  MasterKubletAPIIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MasterNodeSecurityGroup
    Properties:
      Description: "master kubelet API"
      GroupId: !Ref MasterNodeSecurityGroup
      SourceSecurityGroupId: !Ref MasterNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250

  KubeSchedulerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MasterNodeSecurityGroup
    Properties:
      Description: "kube-cheduler"
      GroupId: !Ref MasterNodeSecurityGroup
      SourceSecurityGroupId: !Ref MasterNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 10251
      ToPort: 10251

  KubeControllerManagerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MasterNodeSecurityGroup
    Properties:
      Description: "kube-controller-manager"
      GroupId: !Ref MasterNodeSecurityGroup
      SourceSecurityGroupId: !Ref MasterNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 10252
      ToPort: 10252

  NetworkLoadBalancerIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MasterNodeSecurityGroup
    Properties:
      Description: "network loadbalancer"
      GroupId: !Ref MasterNodeSecurityGroup
      CidrIp: "199.116.73.11/32"
      IpProtocol: tcp
      FromPort: 6443
      ToPort: 6443

  MasterSecureShellManagmentIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: MasterNodeSecurityGroup
    Properties:
      Description: "master secure shell management"
      GroupId: !Ref MasterNodeSecurityGroup
      CidrIp: "0.0.0.0/0"
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  WorkerNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all worker nodes in the cluster
      VpcId:
        !Ref VPCID
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-k8s-worker-sg"

  WorkerKubletAPIIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: WorkerNodeSecurityGroup
    Properties:
      Description: "worker kubelet API"
      GroupId: !Ref WorkerNodeSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250

  WorkerControlPlaneKubletAPIIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: WorkerNodeSecurityGroup
    Properties:
      Description: "worker control plane kubelet API"
      GroupId: !Ref WorkerNodeSecurityGroup
      SourceSecurityGroupId: !Ref MasterNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250

  WorkerNodePortServicesIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: WorkerNodeSecurityGroup
    Properties:
      Description: "worker nodeport services"
      GroupId: !Ref WorkerNodeSecurityGroup
      CidrIp: "0.0.0.0/0"
      IpProtocol: tcp
      FromPort: 30000
      ToPort: 32767

  WorkerSecureShellManagmentIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: WorkerNodeSecurityGroup
    Properties:
      Description: "worker secure shell management"
      GroupId: !Ref WorkerNodeSecurityGroup
      CidrIp: "0.0.0.0/0"
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  CloudProviderAWSSecurityGroup:
    # https://github.com/kubernetes/cloud-provider-aws
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for cloud provider AWS plugin
      VpcId:
        !Ref VPCID
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-cloud-provider-aws-sg"
        - Key: !Sub "kubernetes.io/cluster/${AWS::StackName}"
          Value: ""

  TigeraSecureNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all tsee nodes in the cluster
      VpcId:
        !Ref VPCID
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-tsee-node-sg"

  TigeraSecureBGPNetworkingIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: TigeraSecureNodeSecurityGroup
    Properties:
      Description: "tigera secure ee networking (BGP)"
      GroupId: !Ref TigeraSecureNodeSecurityGroup
      SourceSecurityGroupId: !Ref TigeraSecureNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 179
      ToPort: 179

  TigeraSecureIPinIPNetworkingIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: TigeraSecureNodeSecurityGroup
    Properties:
      Description: "tigera secure ee IP-in-IP mode"
      GroupId: !Ref TigeraSecureNodeSecurityGroup
      SourceSecurityGroupId: !Ref TigeraSecureNodeSecurityGroup
      IpProtocol: "4"
      FromPort: "-1"
      ToPort: "-1"

  K8sNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref K8sNodeInstanceRole

  K8sNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-K8sExternalDNS"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: "Allow"
              Action: "route53:ChangeResourceRecordSets"
              Resource: "arn:aws:route53:::hostedzone/*"
            - Effect: "Allow"
              Action:
                - "acm:DescribeCertificate"
                - "acm:ListCertificates"
                - "acm:GetCertificate"
                - "ec2:AuthorizeSecurityGroupIngress"
                - "ec2:CreateSecurityGroup"
                - "ec2:CreateTags"
                - "ec2:DeleteTags"
                - "ec2:DeleteSecurityGroup"
                - "ec2:DescribeAccountAttributes"
                - "ec2:DescribeAddresses"
                - "ec2:DescribeInstances"
                - "ec2:DescribeInstanceStatus"
                - "ec2:DescribeInternetGateways"
                - "ec2:DescribeSecurityGroups"
                - "ec2:DescribeSubnets"
                - "ec2:DescribeTags"
                - "ec2:DescribeVpcs"
                - "ec2:ModifyInstanceAttribute"
                - "ec2:ModifyNetworkInterfaceAttribute"
                - "ec2:RevokeSecurityGroupIngress"
                - "elasticloadbalancing:AddTags"
                - "elasticloadbalancing:CreateListener"
                - "elasticloadbalancing:CreateLoadBalancer"
                - "elasticloadbalancing:CreateRule"
                - "elasticloadbalancing:CreateTargetGroup"
                - "elasticloadbalancing:ConfigureHealthCheck"
                - "elasticloadbalancing:DeleteListener"
                - "elasticloadbalancing:DeleteLoadBalancer"
                - "elasticloadbalancing:DeleteLoadBalancerListeners"
                - "elasticloadbalancing:DeleteRule"
                - "elasticloadbalancing:DeleteTargetGroup"
                - "elasticloadbalancing:DeregisterTargets"
                - "elasticloadbalancing:DescribeListeners"
                - "elasticloadbalancing:DescribeLoadBalancers"
                - "elasticloadbalancing:DescribeLoadBalancerAttributes"
                - "elasticloadbalancing:DescribeRules"
                - "elasticloadbalancing:DescribeSSLPolicies"
                - "elasticloadbalancing:DescribeTags"
                - "elasticloadbalancing:DescribeTargetGroups"
                - "elasticloadbalancing:DescribeTargetGroupAttributes"
                - "elasticloadbalancing:DescribeTargetHealth"
                - "elasticloadbalancing:ModifyListener"
                - "elasticloadbalancing:ModifyLoadBalancerAttributes"
                - "elasticloadbalancing:ModifyRule"
                - "elasticloadbalancing:ModifyTargetGroup"
                - "elasticloadbalancing:ModifyTargetGroupAttributes"
                - "elasticloadbalancing:RegisterTargets"
                - "elasticloadbalancing:RemoveTags"
                - "elasticloadbalancing:SetIpAddressType"
                - "elasticloadbalancing:SetSecurityGroups"
                - "elasticloadbalancing:SetSubnets"
                - "elasticloadbalancing:SetWebACL"
                - "iam:CreateServiceLinkedRole"
                - "iam:GetServerCertificate"
                - "iam:ListServerCertificates"
                - "route53:ListHostedZones"
                - "route53:ListResourceRecordSets"
                - "waf:GetWebACL"
                - "waf-regional:GetWebACLForResource"
                - "waf-regional:GetWebACLForResource"
                - "waf-regional:GetWebACL"
                - "waf-regional:AssociateWebACL"
                - "waf-regional:DisassociateWebACL"
                - "tag:GetResources"
                - "tag:TagResources"
              Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      RoleName: !Sub "${AWS::StackName}-K8sNodeInstanceRole"

  #
  # K8s Cluster
  #
  MasterNodeNetworkLoadBalancerDNSName:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Ref MasterNodeNetworkLoadBalancerAliasName
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt MasterNodesNetworkLoadBalancer.CanonicalHostedZoneID
            DNSName: !GetAtt MasterNodesNetworkLoadBalancer.DNSName

  MasterNodesNetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-masterNodes-lb"
      Scheme: "internet-facing"
      Subnets:
        - !Ref PublicSubnet0
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LoadBalancerAttributes:
        - Key: "load_balancing.cross_zone.enabled"
          Value: true
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-masterNodes-lb"
      Type: "network"

  MasterNodesNetworkLoadBalancerHTTPSListener:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        -
          Type: forward
          TargetGroupArn: !Ref MasterNodesTargetGroup
      LoadBalancerArn: !Ref MasterNodesNetworkLoadBalancer
      Port: 6443
      Protocol: TCP

  MasterNodesTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-masterNodes-tg"
      Port: 6443
      Protocol: TCP
      HealthCheckPort: 6443
      HealthCheckProtocol: TCP
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPCID
      Tags:
        - Key: "Name"
          Value: !Sub "${AWS::StackName}-masterNodes-tg"

  MasterNodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg"
      DesiredCapacity: 3
      LaunchConfigurationName: !Ref MasterNodeLaunchConfig
      MinSize: 1
      MaxSize: 3
      VPCZoneIdentifier:
        - !Ref PublicSubnet0
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
        - !Ref MasterNodesTargetGroup
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-master-node"
        PropagateAtLaunch: 'true'
      - Key: !Sub "kubernetes.io/cluster/${AWS::StackName}"
        Value: ""
        PropagateAtLaunch: 'true'
      - Key: "kubespray-role"
        Value: "kube-master, etcd"
        PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'

  MasterNodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 'true'
      IamInstanceProfile: !Ref K8sNodeInstanceProfile
      ImageId: !Ref MasterImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref MasterNodeSecurityGroup
        - !Ref TigeraSecureNodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 30
            VolumeType: gp2
            DeleteOnTermination: true

  WorkerNodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-worker-asg"
      DesiredCapacity: 2
      LaunchConfigurationName: !Ref WorkerNodeLaunchConfig
      MinSize: 1
      MaxSize: 3
      VPCZoneIdentifier:
        - !Ref PublicSubnet0
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-worker-node"
        PropagateAtLaunch: 'true'
      - Key: !Sub "kubernetes.io/cluster/${AWS::StackName}"
        Value: ""
        PropagateAtLaunch: 'true'
      - Key: "kubespray-role"
        Value: "kube-node"
        PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'

  WorkerNodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 'true'
      IamInstanceProfile: !Ref K8sNodeInstanceProfile
      ImageId: !Ref WorkerImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref WorkerNodeSecurityGroup
        - !Ref TigeraSecureNodeSecurityGroup
        - !Ref CloudProviderAWSSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 30
            VolumeType: gp2
            DeleteOnTermination: true
