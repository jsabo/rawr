---
AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys a base networking environment to launch resources

Parameters:

  VpcCidrBlock:
    Type: String
    Description: VPC CIDR Block (eg 10.0.0.0/16)
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.0/16

  CreatePrivateNetworks:
    Type: String
    Description: Create private networking resources
    AllowedValues: [true, false]
    Default: false

Conditions:
  CreatePrivateNetworks:
    !Equals [true, !Ref CreatePrivateNetworks]

Resources:

  #
  # Public VPC
  #
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc"
  IPv6CidrBlock:
    Type: 'AWS::EC2::VPCCidrBlock'
    Properties:
      VpcId: !Ref 'VPC'
      AmazonProvidedIpv6CidrBlock: true

  #
  # Internet gateways (ipv4, and egress for ipv6)
  #
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-igw'
  IGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: IGW
      VpcId:
        Ref: VPC
  EgressOnlyIGW:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Condition: CreatePrivateNetworks
    Properties:
      VpcId: !Ref VPC

  #
  # Public route table
  #
  PublicRt:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-rt'
  PublicDefaultIpv4Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRt
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: IGW
  PublicDefaultIpv6Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref PublicRt
      GatewayId:
        Ref: IGW

  #
  # Public subnets
  #
  PublicSubnet0:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 34, 8 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '01::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-public-${AZ}
              - AZ: !Select
                - 0
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnet0RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet0
      RouteTableId:
        Ref: PublicRt

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 34, 8 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '02::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-public-${AZ}
              - AZ: !Select
                - 1
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnet1RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRt

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 34, 8 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '03::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-public-${AZ}
              - AZ: !Select
                - 2
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnet2RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRt

  #
  # Private route tables
  #
  PrivateRt0:
    Type: AWS::EC2::RouteTable
    Condition: CreatePrivateNetworks
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-private-rt-${AZ}
              - AZ: !Select
                - 0
                - Fn::GetAZs: ""
  NAT0:
    Type: AWS::EC2::NatGateway
    Condition: CreatePrivateNetworks
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP0
        - AllocationId
      SubnetId:
        Ref: PublicSubnet0
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-nat-${AZ}
              - AZ: !Select
                - 0
                - Fn::GetAZs: ""
  EIP0:
    Type: AWS::EC2::EIP
    Condition: CreatePrivateNetworks
    Properties:
      Domain: vpc
  NatRoute0:
    Type: AWS::EC2::Route
    Condition: CreatePrivateNetworks
    Properties:
      RouteTableId:
        Ref: PrivateRt0
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT0
  PrivateRt0DefaultIpv6Route:
    Type: AWS::EC2::Route
    Condition: CreatePrivateNetworks
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref PrivateRt0
      EgressOnlyInternetGatewayId: !Ref EgressOnlyIGW

  PrivateRt1:
    Type: AWS::EC2::RouteTable
    Condition: CreatePrivateNetworks
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-private-rt-${AZ}
              - AZ: !Select
                - 1
                - Fn::GetAZs: ""
  NAT1:
    Type: AWS::EC2::NatGateway
    Condition: CreatePrivateNetworks
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP1
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-nat-${AZ}
              - AZ: !Select
                - 1
                - Fn::GetAZs: ""
  EIP1:
    Type: AWS::EC2::EIP
    Condition: CreatePrivateNetworks
    Properties:
      Domain: vpc
  NatRoute1:
    Type: AWS::EC2::Route
    Condition: CreatePrivateNetworks
    Properties:
      RouteTableId:
        Ref: PrivateRt1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT1
  PrivateRt1DefaultIpv6Route:
    Type: AWS::EC2::Route
    Condition: CreatePrivateNetworks
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref PrivateRt1
      EgressOnlyInternetGatewayId: !Ref EgressOnlyIGW

  PrivateRt2:
    Type: AWS::EC2::RouteTable
    Condition: CreatePrivateNetworks
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-private-rt-${AZ}
              - AZ: !Select
                - 2
                - Fn::GetAZs: ""
  NAT2:
    Type: AWS::EC2::NatGateway
    Condition: CreatePrivateNetworks
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP2
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-nat-${AZ}
              - AZ: !Select
                - 2
                - Fn::GetAZs: ""
  EIP2:
    Type: AWS::EC2::EIP
    Condition: CreatePrivateNetworks
    Properties:
      Domain: vpc
  NatRoute2:
    Type: AWS::EC2::Route
    Condition: CreatePrivateNetworks
    Properties:
      RouteTableId:
        Ref: PrivateRt2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT2
  PrivateRt2DefaultIpv6Route:
    Type: AWS::EC2::Route
    Condition: CreatePrivateNetworks
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref PrivateRt2
      EgressOnlyInternetGatewayId: !Ref EgressOnlyIGW

  #
  # Private subnets
  #
  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateNetworks
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 30, !Cidr [ !GetAtt VPC.CidrBlock, 34, 8 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: 'a1::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-private-${AZ}
              - AZ: !Select
                - 0
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubne01RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreatePrivateNetworks
    Properties:
      SubnetId:
        Ref: PrivateSubnet0
      RouteTableId:
        Ref: PrivateRt0

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateNetworks
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 31, !Cidr [ !GetAtt VPC.CidrBlock, 34, 8 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: 'a2::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-private-${AZ}
              - AZ: !Select
                - 1
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnet1RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreatePrivateNetworks
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRt1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreatePrivateNetworks
    DependsOn:
      - VPC
      - IPv6CidrBlock
    Properties:
      CidrBlock: !Select [ 32, !Cidr [ !GetAtt VPC.CidrBlock, 34, 8 ]]
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: 'a3::/64'
            VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]
      VpcId:
        Ref: VPC
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - ${AWS::StackName}-private-${AZ}
              - AZ: !Select
                - 2
                - Fn::GetAZs: ""
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnet2RtAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreatePrivateNetworks
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRt2

Outputs:

  VPC:
    Description: "Virtual private network"
    Value: !Ref VPC
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", VPC ] ]

  PublicSubnet0:
    Description: "First public subnet"
    Value: !Ref PublicSubnet0
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", PublicSubnet0 ] ]

  PublicSubnet1:
    Description: "Second public subnet"
    Value: !Ref PublicSubnet1
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", PublicSubnet1 ] ]

  PublicSubnet2:
    Description: "Third public subnet"
    Value: !Ref PublicSubnet2
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", PublicSubnet2 ] ]

  PrivateSubnet0:
    Condition: CreatePrivateNetworks
    Description: "First private subnet"
    Value: !Ref PrivateSubnet0
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", PrivateSubnet0 ] ]

  PrivateSubnet1:
    Condition: CreatePrivateNetworks
    Description: "Second private subnet"
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", PrivateSubnet1 ] ]

  PrivateSubnet2:
    Condition: CreatePrivateNetworks
    Description: "Third private subnet"
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Join [ ":", [ !Sub "${AWS::StackName}", PrivateSubnet2 ] ]
